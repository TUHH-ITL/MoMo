{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>This is the official documentation of MoMo: An Open-Source Modular Mobile Robot Research Platform.  </p> <p></p> <p>MoMo is an innovative, open-source modular mobile robot designed for diverse research applications within indoor environments. Developed at the Institute of Technical Logistics at TUHH, Hamburg, Germany, MoMo empowers researchers to explore and innovate in fields such as localization, perception, manipulation and more.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modularity: Easily swap out top modules to shift between research applications like localization, perception, and manipulation.</li> <li>Compatibility: Fully compatible with ROS2 and ROS1, facilitating easy integration into existing projects.</li> <li>Customizability: Users can attach any sensor of their choice as a top module, allowing for a personalized research tool.</li> </ul>"},{"location":"#modular-concept","title":"Modular Concept","text":"<p>MoMo is designed with simplicity and accessibility in mind. It's easy to assemble using standard parts, and its open-source design allows for extensive customization and improvements. Different modules can be developed, such as a perception module equipped with lidar and cameras or a manipulation module featuring a robotic arm.</p> <p></p>"},{"location":"#media-gallery","title":"Media Gallery","text":""},{"location":"#get-involved","title":"Get Involved","text":"<p>MoMo is a community-driven project that thrives on your contributions! Here\u2019s how you can get involved:</p> <ul> <li>Build Your Own MoMo: Follow our detailed documentation to build and customize your MoMo.</li> <li>Contribute: Enhance MoMo's capabilities by contributing to our GitHub repository. Open pull requests or tackle existing issues.</li> <li>Support and Queries: If you encounter any issues or have suggestions, please open an issue on our GitHub repository. For additional support or inquiries, you can also contact Markus at markus.knitt@tuhh.de.</li> </ul> <p>Join us in advancing the field of robotics through open-source collaboration and innovation!</p>"},{"location":"1_assembly_instructions/","title":"Build MoMo","text":"<p>This section guides you to build your own MoMo and outlines the manufacturing and assembly process.</p> <p>The following steps roughly describe the assembly procedure:</p> <ol> <li>Cut SMT aluminum construction profiles and assemble the base station.</li> <li>Manufacture custom components</li> <li>Install the motor block (see motor block instructions) in the base station.</li> <li>Connect PC and PC power supply.  </li> <li>Position and wire the electronic components.</li> <li>Electronics: First set or test only the power supply and battery monitor (primary side).</li> <li>Electronics: Upload the arduino code and test all electronic components. </li> <li>Set the motor driver hardware (Maxon_Set_up instructions).</li> <li>Prepare Epos Studio and parameterize 4 motor drivers (software)  </li> </ol> <p>Note: You could also use different manufacturers for aluminum construction profiles, such as ITEM or Bosch, but some connector parts might vary.</p>"},{"location":"1_assembly_instructions/#bill-of-materials-bom","title":"Bill of Materials (BOM)","text":"<p>The following list contains all the components required for the assembly of the robot. The components are divided into different categories. The list is not exhaustive and some components may be missing. The list is intended to provide an overview of the components required for the assembly. The ID column is used to identify the components in the assembly instructions. The vendor column provides the name of the vendor where the component can be purchased.  The link column provides a link to the vendor's website where the component can be purchased. Of course, the components can also be purchased from other vendors. There is no affiliation with the vendors mentioned in the list. The prices include taxes and are subject to change.</p> ID Item Description Provider Price (\u20ac) Quantity Total Amount Product ID Link Multiblock 8 PA SMT 1,28 \u20ac 20 25,60 \u20ac S208MBPA Link to vendor Cross Cable Tie Block with Hammer Nut 8-30 SMT 0,64 \u20ac 10 6,40 \u20ac S208KKMH30 Link to vendor Cable Tie Block 8 SMT 0,41 \u20ac 20 8,20 \u20ac S208KBB Link to vendor Cover and Edging Profile 8 Black 1000mm SMT 0,81 \u20ac 5 4,05 \u20ac S208AEPSCHK Link to vendor Angle Bracket Set 8 30x30 Aluminum SMT 1,22 \u20ac 10 12,20 \u20ac S208WS30A Link to vendor Cube Connector Set 8 30x30 3D SMT 3,08 \u20ac 10 30,80 \u20ac S208WV30303DS Link to vendor T-Slot Nut 8, with Bridge, M5 SMT 0,23 \u20ac 30 6,90 \u20ac S208NSMS5 Link to vendor T-Slot Nut 8, with Bridge, M6 SMT 0,23 \u20ac 30 6,90 \u20ac S208NSMS6 Link to vendor T-Slot Nut 8, with Bridge, M8 SMT 0,23 \u20ac 30 6,90 \u20ac S208NSMS8 Link to vendor Joint 30x30 SMT 7,13 \u20ac 6 42,78 \u20ac S208G30 Link to vendor Profile 8 30x30 Black SMT 21,35 \u20ac 6 128,10 \u20ac S1083030SCH Link to vendor T-Slot Nut 8, with Bridge, M3 SMT 0,23 \u20ac 30 6,90 \u20ac S208NSMS3 Link to vendor T-Slot Nut 8, with Bridge, M4 SMT 0,23 \u20ac 30 6,90 \u20ac S208NSMS4 Link to vendor T-Connector Plate 30 SMT 1,14 \u20ac 20 22,80 \u20ac S208TVP30 Link to vendor Cover Profile 8 32x4 SMT 5,38 \u20ac 4 21,52 \u20ac S208AP324 Link to vendor Mecanum wheel set Robotshop 554,74 \u20ac 1 554,74 \u20ac RB-Nex-74 Link to vendor ID1-ID4 Motor Controller Maxon Motor 916,30 \u20ac 4 3.665,20 \u20ac 594385 Link to vendor Encoder Maxon Motor 247,19 \u20ac 4 988,76 \u20ac 607515 Link to vendor Motors Maxon Motor 294,16 \u20ac 4 1.176,64 \u20ac 607946 Link to vendor Planetary Gearbox Maxon Motor 507,04 \u20ac 4 2.028,16 \u20ac 223086 Link to vendor Power Cable Maxon Motor 17,90 \u20ac 4 71,60 \u20ac 275829 Link to vendor Intelligent connector system from Harting (1 male, 1 female connector) Harting 512,00 \u20ac 1 512,00 \u20ac Click Here BAT1 Lithium-ion battery 24V 60Ah 1440Wh 60A Akkushop-24 569,00 \u20ac 1 569,00 \u20ac 2460 Link to vendor X5 Clamp ptfix 6/...X1.5 blue reichelt 3,35 \u20ac 1 3,35 \u20ac PHOE 3273332 Link to vendor X4 Clamp ptfix 6/...X1.5 red reichelt 3,25 \u20ac 1 3,25 \u20ac PHOE 3273334 Link to vendor Flange PTFIX 1.5 reichelt 0,36 \u20ac 4 1,44 \u20ac 104524 Link to vendor Flange PTFIX 2.5 reichelt 0,36 \u20ac 4 1,44 \u20ac 104525 Link to vendor X1 Distribution block PTFIX, 12x2.5 Gray reichelt 6,10 \u20ac 1 6,10 \u20ac PHOE 3273352 Link to vendor X2 Distribution block PTFIX, 12x2.5 Red reichelt 6,20 \u20ac 1 6,20 \u20ac PHOE 3273356 Link to vendor X3 Distribution block PTFIX, 12x2.5 Blue reichelt 6,10 \u20ac 1 6,10 \u20ac PHOE 3273354 Link to vendor S1 Stainless steel pressure switch \u00d819mm Metzler 14,99 \u20ac 2 29,98 \u20ac P19-RF-RGB Link to vendor U1 Battery monitor 50A / 70A BW801e LEAB 137,00 \u20ac 1 137,00 \u20ac 1305041043 Link to vendor U3 Can Master Module Kvaser Leaf Light HS v2 distrelec 285,00 \u20ac 1 285,00 \u20ac 110-70-530 Link to vendor S2 Emergency stop button conrad 13,44 \u20ac 1 13,44 \u20ac 2304760 - 62 Link to vendor K1 Solid state relay TC-GSR-1-100DD 100 A conrad 26,04 \u20ac 2 52,08 \u20ac 2527195 - 62 Link to vendor F1 4x circuit distributor FHA504 flat fuse conrad 25,20 \u20ac 1 25,20 \u20ac 1628982 - 62 Link to vendor F2 6x FHA506 flat fuse circuit distributor conrad 24,36 \u20ac 1 24,36 \u20ac 1628986 - 62 Link to vendor F3 Flat fuse 50A conrad 3,44 \u20ac 1 3,44 \u20ac 839760 - 62 Link to vendor T1 30V to 12V voltage converter Amazon 24,99 \u20ac 1 24,99 \u20ac Link to vendor 7-inch display K2 Schneider Electric ZBRRA receiver for wireless push-button voelkner 165,04 \u20ac 1 165,04 \u20ac W14844 Link to vendor S3 Schneider Electric XB4BA21 Harmony XB4BA21 Push-button Actuator flat voelkner 11,18 \u20ac 1 11,18 \u20ac W11012 Link to vendor B1 Battery Voltage Meter Amazon 12,50 \u20ac 1 12,50 \u20ac Link to vendor X6-X10 Molex crimp housing - micro-fit - 2x2-pin - plug reichelt 0,60 \u20ac 4 2,40 \u20ac MOLEX 430200401 Link to vendor X16 USB3 Socket Reichelt 8,74 \u20ac 1 8,74 \u20ac Link to vendor X15 USB2 Socket Reichelt 6,39 \u20ac 1 6,39 \u20ac Link to vendor X20 HDMI Socket conrad 17,99 \u20ac 1 17,99 \u20ac Link to vendor X19 Ethernet Socket conrad 6,99 \u20ac 1 6,99 \u20ac Link to vendor PC1 Motherboard bicker 380,80 \u20ac 1 380,80 \u20ac Link to vendor PC1 CPU Fan Voelkner 52,65 \u20ac 1 52,65 \u20ac Link to vendor PC1 WiFi reichelt 16,76 \u20ac 1 16,76 \u20ac Link to vendor PC1 64 GB RAM cyberport 268,00 \u20ac 1 268,00 \u20ac Link to vendor PC1 i9 12900T Processor alternate 625,00 \u20ac 1 625,00 \u20ac Link to vendor T2 M3-ATX-HV 6-34V DC/DC (95 W) minipc 69,95 \u20ac 1 69,95 \u20ac 1217 Link to vendor <p>Note: Depending on your floor it might be good to choose rubber mecanum wheels instead of nylon mecanum wheels in order to ensure better traction. Rubber mecanum wheels are recommended for smooth floors (e.g. smooth concrete) and nylon wheels are recommended for floors that have more rough texture.</p>"},{"location":"1_assembly_instructions/#manufacture-custom-components","title":"Manufacture custom components","text":"<p>Before the assembly can begin, some custom parts need to be manufactured using a lathe and a milling machine. For the manufacturing we provide the 2D drawings of the individual components. The PDFs contain important data for the production of each part.</p> <ul> <li>Gear cover</li> <li>Spacer bearing wheel </li> <li>Flange gear motor </li> <li>Flange cover </li> <li>Wheel mounting disc </li> <li>Wheel shaft </li> <li>Motor block assembly </li> </ul>"},{"location":"1_assembly_instructions/#instructions-for-assembling-the-motor-blocks","title":"Instructions for Assembling the Motor Blocks","text":"<p>In the following the instructions for assembling the motor blocks are explained step-by-step. The entire process is visualized below:</p> <p></p>"},{"location":"1_assembly_instructions/#gather-components","title":"Gather Components","text":"<p>For the assembly of one motor block you require the following parts:</p> <ul> <li>2 ball bearings: 6003-2Z, Deep groove ball bearing, single row, Inner diameter 17mm / Outer diameter 35mm, Width 10mm</li> <li>1 retaining ring (DIN 471 17x1 VE200)</li> <li>1 wheel Shaft</li> <li>4 countersunk screws (DIN7991 M5 x 12mm)</li> <li>1 motor with gearbox (motor and gearbox are delivered pre-assembled)</li> <li>1 gearbox cover</li> <li>1 flange</li> <li>4 cylinder screws (DIN912 M5 x 70 mm)</li> <li>4 countersunk screws (M4 x 8mm)</li> <li>1 spacer bearing wheel</li> <li>4 slot nuts (M8)</li> <li>4 cylinder screws (M8)</li> <li>1 flange cover</li> <li>4 countersunk screws (M4 x 8mm)</li> <li>1 mecanum wheel (should be delivered pre-assembled)</li> <li>1 wheel mounting disk</li> <li>1 fine screw (DIN 912 M8 x 16)</li> </ul>"},{"location":"1_assembly_instructions/#mount-and-secure-ball-bearing-on-shaft","title":"Mount and Secure Ball Bearing on Shaft","text":"<p>A ball bearing with a retaining ring for a 17mm shaft must be installed as shown in the picture below.</p> <p></p>"},{"location":"1_assembly_instructions/#connection-of-the-gearbox-cover-to-the-motor","title":"Connection of the Gearbox cover to the Motor","text":"<p>On the motor, the gearbox cover is attached and secured with 4 countersunk screws (DIN7991 M5 x 12mm). Please refer to the image below!</p> <p></p>"},{"location":"1_assembly_instructions/#connecting-the-motor-with-the-shaft-and-the-flange","title":"Connecting the motor with the shaft and the flange","text":"<p>Then, connect the pre-assembled shaft (Step 1) 1 to the flange and secure it with 4 cylinder screws (DIN912 M5 x 70 mm). Please refer to the image below!</p> <p></p>"},{"location":"1_assembly_instructions/#attachment-of-the-flange-cover","title":"Attachment of the flange cover","text":"<p>The next step is to attach the second ball bearing with the flange cover and secure it with 4 countersunk screws (M4 x 8mm). The second ball bearing should be attached carefully as it has little slack. The flange cover must be completely closed, there should be no gap.</p> <p></p>"},{"location":"1_assembly_instructions/#assembly-of-the-motor-block-on-the-robot-frame","title":"Assembly of the Motor Block on the Robot Frame","text":"<p>The assembled motor block must be mounted on the robot frame and secured. When all steps have been completed, the motor block must be attached to the robot frame and secured with the appropriate 4 cylinder screws (M4) into fitting slot nuts.</p> <p>Insert the custom feather key into the corresponding slot.</p> <p></p>"},{"location":"1_assembly_instructions/#installation-of-the-mecanum-wheel-on-the-shaft","title":"Installation of the Mecanum Wheel on the Shaft","text":"<p>Move the Mecanum wheel onto the shaft. Secure with a wheel mounting disk and a fine screw (DIN 912 M8 x 16).</p> <p></p> <p>Below you can see the assembled motor block attached to the robot frame.</p> <p></p>"},{"location":"1_assembly_instructions/#connect-motor-unit-to-motor-driver","title":"Connect Motor Unit to Motor Driver","text":"<p>After following the assembly instruction for the motor unit, the next step is connecting the motor to the motor driver. In the following, the electronic connection of the motor unit with the motor driver will be explained.  Motor unit with cables</p> <p>First you have to connect the motor unit to the motor driver. There are only 3 cables (see the image below):</p> <ul> <li>Hall sensor 6 pole Molex mini connector (X4)</li> <li>Encoder 10 pole pin connector (X5)</li> <li>Motor power supply (X3a) (with white/black/red cable with 4-pin Molex connector)</li> </ul> <p> Connectors  X4(left), X3a(middle), X5(right) </p> <p>The following image shows where to connect the cables to the motor driver.  Relevant ports on the motor driver</p> <p>Once the previous steps are completed, connect power supply (24-30V) to the port X1.</p>"},{"location":"1_assembly_instructions/#dip-switch-configuration","title":"DIP Switch Configuration","text":"<p>Locate the DIP switch SW1 on the motor driver. DIP switch SW1</p> <p>Each controller should have its own ID. It is important to identify exactly in the CAN node first motor gets ID1 and last ID4 ID must not only be changed manually on the switch, but also in the Epos Studio software under CAN settings. This is exactly where the CAN setting is entered</p> <ul> <li>ID1: Switch 1 to on all others to off </li> <li>ID2: Switch 2 to on all others to off </li> <li>ID3: Switch 1 and Switch 2 to on all others to off</li> <li>ID4: Switch 3 set to on all others set to off</li> </ul> <p> Binary code values for the DIP switch SW1</p>"},{"location":"1_assembly_instructions/#can-automatic-bit-rate-detection","title":"CAN automatic Bit Rate Detection","text":"<p> DIP switch setting for enabling automatic bit rate detection We recommend using the automatic bitrate setting for CAN node. To use this, switch 6 must be active.</p>"},{"location":"1_assembly_instructions/#can-bus-termination","title":"CAN Bus Termination","text":"<p>for CAN nodes always 2 terminating resistors each 120 Ohm. You can connect manually at the beginning/end or use internal resistors from the controller.  To do this, connect as shown in the picture and set switch 7 to \"on\" for controller 1 and 4  Set DIP switch SW7 to \"on\" for CAN bus termination </p>"},{"location":"1_assembly_instructions/#status-indicators","title":"Status Indicators","text":""},{"location":"1_assembly_instructions/#the-epos4-features-three-sets-of-led-indicators-to-display-the-device-condition","title":"The EPOS4 features three sets of LED indicators to display the device condition","text":"<ul> <li>A NET Status; the LEDs display communication RUN states and errors conditions.</li> <li>B Device Status; the LEDs display the device\u2019s operation status and error conditions</li> </ul> <p> Location of Status LEDs</p>"},{"location":"1_assembly_instructions/#device-status","title":"Device Status","text":"<p>The LEDs (B Device Status) display the actual status and possible errors of the EPOS4:</p> <ul> <li>Green LED shows the status</li> <li>Red LED indicates errors</li> </ul> <p> Status LEDs for the EPOS 4 Motor Controller</p>"},{"location":"1_assembly_instructions/#motor-driver-software-configuration","title":"Motor Driver Software Configuration","text":"<p>Software setup with EPOS Studio</p>"},{"location":"1_assembly_instructions/#installation","title":"Installation","text":"<p>Install the latest EPOS-IDX Studio: EPOS Studio 3.7. The best way to get it is using the button \u201cDownload EPOS Setup\u201d at the bottom of maxon EPOS website http://epos.maxongroup.com. After installation you can find various documentations under the following folders: C:\\Program Files (x86)\\maxon motor ag\\EPOS IDX\\EPOS4\\04 Programming C:\\Program Files (x86)\\maxon motor ag\\EPOS IDX\\EPOS4\\05 Applications\\Application Notes Alternatively, you can find it at the bottom of the link above (\u00a72.1), or under the Download section of any EPOS4 product detail.</p>"},{"location":"1_assembly_instructions/#firmware-update","title":"Firmware Update","text":"<p>Update all EPOS4 boards to the latest firmware using EPOS Studio. Once you created an EPOS4 project and connected to your controller, just right click on it, and go to Wizard and then Firmware Update.</p>"},{"location":"1_assembly_instructions/#startup-settings","title":"Startup settings","text":"<p>Open the Startup Wizard and fill the parameters based on your motor data. The following screenshots show the settings for the motor, gear, sensors, commutation, regulation, unit, limit, device control, and windows as we used them for the specific motor.</p> <p> Motor parameters in EPOS Studio Gear parameters in EPOS Studio</p> <p> Sensor parameters in EPOS Studio</p> <p> Communication settings</p> <p> Regulation settings</p> <p> Controller Unit settings</p> <p> Operating Limits</p> <p> Device control settings</p> <p> Specify standstill window limits</p> <p> Touch probe functionality parameters </p>"},{"location":"1_assembly_instructions/#regulation-tuning","title":"Regulation Tuning","text":"<p>Open the Regulation Tuning Wizard and proceed to the auto tuning steps while making sure the motor can move safely. </p> <p>Important: Lift the robot. The wheels should touch the ground!</p>"},{"location":"1_assembly_instructions/#canopen-settings","title":"CANopen settings","text":""},{"location":"1_assembly_instructions/#sdo-parameters","title":"SDO parameters","text":"<p>Open the CANopen Wizard and leave the first page as it is for the SDO parameters  Service Data Objects for ID 1 The ros_canopen package expects specific PDO settings in order to function properly</p>"},{"location":"1_assembly_instructions/#receive-pdos","title":"Receive PDOs","text":"<p>For the Receive PDOs, map the CAN objects as the following screenshot, by choosing from the list on the right.  Receive PDOs for ID 1</p> <p>Please make sure to keep the correct order. Verify that the COB-IDs have the correct Node ID hexadecimal value added at the end. For example, ID1 in this case (for Node-ID 1) the RxPDO COB-ID is 0x0000 0200 + 0x1 = 0x0000 0201. For example, ID2 in this case (for Node-ID 2) the RxPDO COB-ID is 0x0000 0200 + 0x2 = 0x0000 0202. For example, ID3 in this case (for Node-ID 3) the RxPDO COB-ID is 0x0000 0200 + 0x3 = 0x0000 0203. For example, ID4 in this case (for Node-ID 4) the RxPDO COB-ID is 0x0000 0200 + 0x4 = 0x0000 0204.  </p>"},{"location":"1_assembly_instructions/#transmit-pdos","title":"Transmit PDOs","text":"<p>For the Transmit PDOs, select RTR and you can leave the inhibit time as 1 ms. Proceed similarly as above to do the following CAN objects mapping:  Transmit PDOs for ID 1</p> <p>In the Error Protocol tab, you can leave the Heartbeat consumer and producer unchecked. Verify that the COB-IDs have the correct Node ID hexadecimal value added at the end. For example, ID1 in this case (for Node-ID 1) the RxPDO COB-ID is 0x0000 0200 + 0x1 = 0x0000 0201. For example, ID2 in this case (for Node-ID 2) the RxPDO COB-ID is 0x0000 0200 + 0x2 = 0x0000 0202. For example, ID3 in this case (for Node-ID 3) the RxPDO COB-ID is 0x0000 0200 + 0x3 = 0x0000 0203. For example, ID4 in this case (for Node-ID 4) the RxPDO COB-ID is 0x0000 0200 + 0x4 = 0x0000 0204.</p>"},{"location":"1_assembly_instructions/#object-dictionary","title":"Object Dictionary","text":"<p>In case you are using CSP Mode with MoveIt!, it is important to adjust the CAN bus cycle time of updated \u201cTarget position\u201d data properly by setting the EPOS4 object \u201cInterpolation time period value\u201d (0x60C2/01).</p> <p>It is recommended to use a value of 10ms.</p> <p>Please find more information about this by maxon\u2019s public Support Center document \u201cEPOS4 / IDX: CSP Mode -&gt; Relevance of \"Interpolation Time Period Value\"?\u201d. https://support.maxongroup.com/hc/en-us/articles/4402184834322-EPOS4-IDX-CSP-or-CSV-Mode-Relevance-of-Interpolation-Time-Period-Value</p>"},{"location":"1_assembly_instructions/#change-direction-of-rotation-vor-motor-control-id-2-and-id-4","title":"Change direction of rotation vor motor control ID 2 and ID 4","text":"<p>If you want to change the default direction of rotation of the EPOS, you can do so in Object 0x3000 0x04. Write 0x00000001 (i.e., Bit0) to the Object. Axis configuration miscellaneous You can make the change using the EPOS Studio -&gt; Tools -&gt; Object Dictionary. Important: after the change, you must also save this parameter. Right-click on the Object -&gt; Save All Parameters.</p> <p> Object Dictionary</p>"},{"location":"1_assembly_instructions/#dcfeds-file","title":"DCF/EDS file","text":"<p>The ros_canopen package can be used with both DCF or EDS files. The current examples use DCF files. To export a DCF file, just right click on your EPOS4 controller, go to Wizards -&gt; Parameter Import/Export, type a file name and do \u201cExport Parameters to File\u201d. To export an EDS file, go to the Object Dictionary window, right click on any line and select \u201cExport EDS file\u201d, as explained in the following maxon support documentation: https://support.maxongroup.com/hc/en-us/articles/360012778713.</p>"},{"location":"1_assembly_instructions/#dcfeds-file-replace","title":"DCF/EDS file replace","text":"<p>Replace the current DCF files with the ones you generated earlier in \"DCF/EDS file\" and make the changes in the node layer files accordingly, so that the \u201ceds_file\u201d tag matches your file name. The current official version of ros_canopen can\u2019t parse boolean DataType (0x1) objects. It is therefore necessary to delete the only boolean DataType object, [2200sub2] (Internal valid logic supply), then change the SubNumber of [2200] to 2 and ParameterValue of [2200sub0] to 1 (lines in bold):</p> <p>[2200] ~~SubNumber=3~~ SubNumber=2 ParameterName=Power supply ObjectType=0x9</p> <p>[2200sub0] ParameterName=Highest sub-index supported ObjectType=0x7 DataType=0x5 AccessType=ro DefaultValue=2 PDOMapping=0 ObjFlags=1 ~~ParameterValue=2~~ ParameterValue=1  </p> <p>[2200sub2] ParameterName=Internal valid logic supply ObjectType=0x7 DataType=0x1 AccessType=ro PDOMapping=0 ObjFlags=1 <p>[6098] ParameterName=Homing method ObjectType=0x7 DataType=0x2 AccessType=rww ~~DefaultValue=7~~ DefaultValue=0 PDOMapping=0 ObjFlags=0 ~~ParameterValue=7~~ ParameterValue=0  </p> <p>The Homing method value 0 means \u201cno Homing method required\u201d according to CiA 402 standard.</p>"},{"location":"1_assembly_instructions/#instruction-for-component-configuration-module-electric-connector-mec","title":"Instruction for Component Configuration: Module-Electric-Connector (MEC)","text":"<p>Visit the homepage: https://b2b.harting.com/ebusiness/en/ CLICK ON \"Configurators\" at the top right corner. In the next tab under \"Industrial Connectors\", CLICK ON \"Configure now\". You can start the configuration with or without logging in. CLICK ON \"Start new configuration\" in the further tab. On the current tab, you should see the following selection table: Hood Insert top Insert bottom Housing</p> <p>CLICK ON \"Configure\" below Hood. Enter the product number in the window: \"Search for product number\" for the first component: Han 24B-KG-Docking Frame (35 mm) product number: 09 30 024 1704</p> <p>(this part will also be used later for Housing Subpart as these components are asymmetrically designed) CLICK ON the plus-symbol next to the component, so that now you see a checkmark. The component appears left in the picture as a 3-D model. CLICK ON \"Apply\u201c.</p> <p>If you do not see now two components left next to the table, the selected docking frame with the belonging: Han hinged frame plus, for 6 modules A-F with the product number: 09 14 024 0361 (hover the mouse-icon over Insert top)  CLICK ON \"Configure\" below Insert top although. CHOOSE the insert type: \"Connector with modular insert\" You should see now in the left picture the Han hinged frame plus, for 6 modules A-F. Now CHOOSE for the slots A to F in the top row of the docking frame the following assembly components for the upper module. Proceed with the plus-symbols as with the first selection, so that each component is marked with a checkmark, in this order, slot for slot:</p> <p>slot A and B: Han USB 3.0 module   product number:  09 14 001 4703 slot C and D: Han RJ45 module, female gender changer product number: 09 14 001 4721 slot E and F: Han EE Quick-Lock module, male 1,5mm\u00b2 product number: 09 14 008 2634 </p> <p>CLICK ON \"Guiding\" in the top row and CHOOSE: \"4 M, 0 F, hood-housing, modular\" for the mounting fixation. If you see all components in this order left in the picture. CLICK ON \"Apply\u201c. Now you see the progress of your configuration next to the table. For the lower part for the MEC proceed as before. Begin with the subpart Housing. CLICK ON \"Configure\" below Housing for Housing Subpart. Very likely the docking frame is already pre-selected. Han 24B-KG-Docking Frame (35 mm) product number: 09 30 024 1704 CLICK ON \"Apply\u201c You see the almost finished configuration next to the table. Here you have also already through the system a pre-selection of the required assembly components in the correct order. Choose for: Slot A and B: Han USB module, male for patch cord product number: 09 14 001 4601 Slot C and D: Adapter Han RJ45 module-RJ45 patch cabel product number: 09 14 000 9966 Slot E and F: Han EE Quick-Lock module, female 1,5mm\u00b2 product number: 09 14 008 2734</p> <p>CLICK ON \"Guiding\" in the top row and CHOOSE: \"4 M, 0 F, hood-housing, modular\" for the mounting fixation. CLICK ON \"Apply\u201c.</p> <p>When you hower the mouse-icon over Insert top and Insert bottom can see now in the Product List all required parts, also form the system pre-selected Han-Modular Guiding Bush product number: 09 14 000 9909 and Han-Modular Guide pin product number: 09 14 000 9908 to go to the overall CLICK ON \"Continue\u201c</p> <p>Make sure that all components are listed with the corresponding product numbers.</p> <p>If all components are correctly configured according to the instructions, you have successfully completed the setup of your Electric-Connector-Module. CLICK ON \"Add to shopping cart\".  </p> <p>Now you need to log in or register first.   </p>"},{"location":"1_assembly_instructions/#electronics","title":"Electronics","text":"<p>Make sure that you have the necessary experience in electronics before starting the assembly. The authors do not take any responsibility for any damage caused by the assembly of the electronics. The following figure shows a high-level view of all the electronics.  For a more detailed visualization of all electronic connections, take a look at the circuit diagrams here: Circuit Diagrams</p> <p>Once the arduino is connected to the PC, you can upload the code to the arduino. Install the arduino IDE and open the <code>main.ino</code> from the arduino folder. Load the code to the arduino.</p>"},{"location":"2_software_setup/","title":"Installation","text":"<p>This section guides you through installing all the ROS1 and ROS2 packages required to get the robot up and running. The image below illustrates the software architecture of the MoMo robot. Currently, ROS2 drivers for the Maxon motors are unavailable, necessitating the use of two computers. The Control PC (an Intel NUC) handles low-level control and sends velocity commands to the robot base, while the Main PC (Board PC) manages high-level control and computation. In the future, once the drivers become available, we will consolidate all tasks onto the Main PC.</p> <p></p> <p>Please follow the installation steps mentioned below in your Control PC:</p>"},{"location":"2_software_setup/#ros1-control","title":"ROS1 Control","text":"<p>By following this section you will be able to control the robot and send velocity commands in ROS1. Once you are successful in doing this, follow the  ROS2 Control (via ROS1 Bridge) section to be able to do the same in ROS2. Since the motor drivers are not yet available, it is necessary to set up the control first in ROS1 before moving to ROS2.</p>"},{"location":"2_software_setup/#install-ubuntu","title":"Install Ubuntu","text":"<p>Install Ubuntu 20.04 in the control PC. It is recommended to have at least 8 GB of RAM for running ROS1 and ROS2 simultaneously using the rosbridge.</p>"},{"location":"2_software_setup/#install-ros","title":"Install ROS","text":"<p>Install ROS Noetic:</p> <p>noetic/Installation/Ubuntu - ROS Wiki</p> <p>Create a catkin_ws for ROS1.</p> <p>Do not put these lines in .bashrc:</p> <pre><code>source /opt/ros/noetic/setup.bash\nsource ~/catkin_ws/devel/setup.bash\n</code></pre> <p>Instead manually source it whenever required. You can create an alias if you want in your .bashrc:</p> <pre><code>alias sr1='source /opt/ros/noetic/setup.bash &amp;&amp; source ~/catkin_ws/devel/setup.bash'\n</code></pre> <p>We do not want ROS1 to be sourced automatically when we open a terminal every time as it might create conflicts later when we use ros1_bridge with ROS2.</p>"},{"location":"2_software_setup/#clone-the-repository","title":"Clone the Repository","text":"<p>Clone the <code>noetic</code> branch of MoMo repository in your <code>catkin_ws/src</code>.</p> <pre><code>cd ~/catkin_ws/src\ngit clone -b noetic https://github.com/TUHH-ITL/MoMo.git\n</code></pre>"},{"location":"2_software_setup/#install-dependencies","title":"Install dependencies","text":"<p>Install <code>ros_canopen</code> and its dependencies, install the following ROS packages:</p> <pre><code>sudo apt-get install ros-noetic-canopen-* ros-noetic-control* ros-noetic-rqt-controller-manager ros-noetic-joint-state-controller ros-noetic-velocity-controllers ros-noetic-effort-controllers ros-noetic-joint-state-publisher-gui ros-noetic-std-srvs\n</code></pre> <p>Run the following command to update ROS dependency tree:</p> <pre><code>rospack profile\n</code></pre>"},{"location":"2_software_setup/#install-required-packages","title":"Install required packages","text":"<p>Install the following packages:</p> <pre><code>sudo apt-get install ros-noetic-amcl* ros-noetic-move-base* ros-noetic-map-server* ros-noetic-robot-pose-ekf* ros-noetic-twist-mux* ros-noetic-teleop*\n</code></pre> <p>And also:</p> <pre><code>sudo apt install ros-noetic-controller-manager* ros-noetic-twist* ros-noetic-robot-localization*\n</code></pre>"},{"location":"2_software_setup/#build-your-workspace","title":"Build your workspace","text":"<p>Build your catkin_ws:</p> <pre><code>cd ~/catkin_ws\n\ncatkin_make\n</code></pre>"},{"location":"2_software_setup/#connect-the-can-cable","title":"Connect the CAN cable","text":"<p>Connect the CAN cable from the robot to the control PC and run the following commands in the terminal:</p> <pre><code>sudo ip link set can0 type can bitrate 1000000\n\nsudo ip link set can0 up\n</code></pre> <p>To check if it is up: </p> <pre><code>ip link show can0\n</code></pre>"},{"location":"2_software_setup/#configure-the-joystick","title":"Configure the joystick","text":"<p>Connect the joystick with the control PC to be able to control the robot using the joystick in ROS1. (Check if it is working by following instructions in this link)</p>"},{"location":"2_software_setup/#control-the-robot","title":"Control the robot","text":"<p>Open two terminals and source ROS1 in both of them and run the following on after the another in following sequence:</p> <pre><code>roslaunch momo_description momo_description.launch\n</code></pre> <pre><code>roslaunch momo_startup robot_control.launch\n</code></pre> <p>Now you can move the robot using the joystick, velocity commands are sent to the robot over the <code>cmd_vel</code> topic.</p>"},{"location":"2_software_setup/#ros2-control-via-ros1-bridge","title":"ROS2 Control (via ROS1 Bridge)","text":""},{"location":"2_software_setup/#install-ros2","title":"Install ROS2","text":"<p>Install ROS2 Humble from source in the control PC.</p> <p>Ubuntu (source) \u2014 ROS 2 Documentation: Humble  documentation See the Note below.</p> <p>Clone the ros1_bridge package in your <code>ros2_ws/src</code>:</p> <pre><code>git clone https://github.com/ros2/ros1_bridge.git\n</code></pre> <p>Note: During the build step run this command instead of the command from the official tutorial: <pre><code>colcon build --symlink-install --packages-skip ros1_bridge\n</code></pre></p> <p>Do not put the following in the .bashrc:</p> <pre><code>source ~/ros2_ws/install/setup.bash\n</code></pre> <p>You can create an alias if you want in your .bashrc (optional):</p> <pre><code>alias sr2='source ~/ros2_ws/install/setup.bash'\n</code></pre>"},{"location":"2_software_setup/#uninstall-package","title":"Uninstall package","text":"<p>You then need to uninstall manually the <code>controller_manager_msgs</code> package from ROS noetic, starting first with the share directory:</p> <pre><code>cd /opt/ros/noetic/share\n\nsudo rm -r controller_manager_msgs\n</code></pre> <p>Repeat these steps with include directory:</p> <pre><code>cd /opt/ros/noetic/include\n\nsudo rm -r controller_manager_msgs\n</code></pre>"},{"location":"2_software_setup/#build-ros1_bridge","title":"Build <code>ros1_bridge</code>","text":"<p>Build <code>ros1_bridge</code> package: (You need to source both ROS1 and ROS2 for this)</p> <pre><code>cd ~/ros2_humble\n\n# Source ROS1 first\n# Then source ROS2 in the same terminal, and then:\n\ncolcon build --symlink-install --packages-select ros1_bridge --cmake-force-configure\n</code></pre> <p>More information about ros1_bridge can be found here.</p>"},{"location":"2_software_setup/#reinstall-package","title":"Reinstall package","text":"<p>Reinstall the <code>controller_manager_msgs</code> package:</p> <pre><code>sudo apt install ros-noetic-controller-manager-msgs\n</code></pre>"},{"location":"2_software_setup/#source-ros1-and-ros2","title":"Source ROS1 and ROS2","text":"<p>Run the ROS1 control as mentioned above and keep it running. Open another terminal and source ROS1 and ROS2 in sequence (in the same terminal), and run the following:</p> <pre><code>ros2 run ros1_bridge dynamic_bridge\n</code></pre>"},{"location":"2_software_setup/#publish-to-topic","title":"Publish to topic","text":"<p>In another terminal, source ROS2 only and then publish to the /cmd_vel topic, and the robot should move. For e.g.:</p> <pre><code>ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"\n</code></pre> <p></p> <p>Congratulations! Now you are able to control the robot in ROS1 as well as in ROS2 from the control PC. Now in the next section we add startup scripts to simplify the startup process and setup the SSH connection between the control PC and the Main PC connected via ethernet cable so that we can control the robot from the Main PC in ROS2 Humble without having to enter the password everytime we SSH into the Control PC from the Main PC.</p>"},{"location":"2_software_setup/#setup-ssh-connection","title":"Setup SSH connection","text":"<p>Setup an SSH connection between the Main PC (board computer) and the Control PC (Intel NUC) so that you don't have to enter password every time you want to SSH into the NUC. This is also a necessary step in case of using the bash scripts while starting the robot.</p> <p>Generate SSH Key Pair on the Main PC:</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Press Enter to accept the default file location and optionally set a passphrase.</p> <p>Copy Public Key to the NUC using: (This should be executed in the Main PC)</p> <pre><code>ssh-copy-id username@NUC_IP_Address\n</code></pre> <p>Replace username with your NUC's username and NUC_IP_Address with the NUC's IP address. (To know IP address: hostname -I)</p> <p>Now you should be able to SSH into the NUC from the board computer without entering the password using:</p> <pre><code>ssh username@NUC_IP_address\n</code></pre>"},{"location":"2_software_setup/#clone-momo-repository-in-main-pc","title":"Clone MoMo Repository in Main PC","text":"<p>Run the following in the Main PC to clone the MoMo repository <code>humble</code> branch in your <code>ros2_ws/src</code>:</p> <pre><code>cd ~/ros2_ws/src\ngit clone -b humble https://github.com/TUHH-ITL/MoMo.git\n</code></pre>"},{"location":"2_software_setup/#install-joystick-package","title":"Install joystick package","text":"<p>Install the joystick ros package to teleoperate the robot using a joystick from the Main PC in ROS2. On the Main PC run the following command:</p> <pre><code>sudo apt install ros-humble-teleop-twist-joy\n</code></pre>"},{"location":"2_software_setup/#install-catmux","title":"Install catmux","text":"<p>Catmux is a command-line tool used to create and manage Tmux sessions using YAML configuration files.</p> <p>Run this command in the Main PC to install catmux :</p> <pre><code>pip3 install --user catmux\n</code></pre>"},{"location":"2_software_setup/#add-alias-for-startup-and-shutdown","title":"Add alias for startup and shutdown","text":"<p>We setup some aliases in the Main PC so that we don't have to type long commands everytime working with the robot.</p> <p>Set the path for yml files: (change if it looks different for you)</p> <p><pre><code>export MOMO_PATH=~/ros2_humble/src/MoMo\n</code></pre> Set up aliases for starting, stopping and shutting down the robot in the Main PC:</p> <pre><code>echo \"alias wakeupmomo='catmux_create_session $MOMO_PATH/wakeupmomo.yml --session_name wakeupmomo'\" &gt;&gt; ~/.bashrc\n\necho \"alias stopmomo='catmux kill-session -t wakeupmomo'\" &gt;&gt; ~/.bashrc\n\necho \"alias sleepmomo='catmux_create_session $MOMO_PATH/sleepmomo.yml'\" &gt;&gt; ~/.bashrc\n</code></pre> <p>(Note: Read comments in the wakeupmomo.yml and sleepmomo.yml in the MoMo repository and set variables according to your system)</p>"},{"location":"2_software_setup/#building-the-documentation-locally-for-developers-only","title":"Building the documentation locally (for developers only)","text":"<p>The documentation is managed by Mkdocs.</p> <p>Install the following:</p> <pre><code>pip install mkdocs\npip install mkdocs-material mkdocs-material-extensions --upgrade\npip install pillow cairosvg --upgrade\n</code></pre> <p>To view the documentation, locate your terminal where the <code>mkdocs.yml</code> file is present and run:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"3_startup_procedure/","title":"Startup Procedure","text":"<p>Before proceeding further please make sure everything is installed correctly by following the Installation section. Follow these steps to start the MoMo:</p>"},{"location":"3_startup_procedure/#power-on","title":"Power On","text":"<p>Press the main power button to start the board computer on the robot and then press the power button on the NUC to turn on the NUC.</p>"},{"location":"3_startup_procedure/#check-connection","title":"Check connection","text":"<p>From the board computer, open a terminal and ping the NUC to verify if it is ON using:</p> <pre><code>ping 192.168.1.1 # change IP address if different\n</code></pre> <p>Replace the IP address with your own configured IP address for the NUC. Follow this tutorial to set static ip for both computers.</p>"},{"location":"3_startup_procedure/#start-command","title":"Start command","text":"<p>Open up a terminal on the main computer and run the following command:</p> <pre><code>wakeupmomo\n</code></pre> <p>wakeupmomo is an alias which starts a catmux session.</p> <p>wakeupmomo command opens up four terminals, three of them SSHs into the NUC and one of them starts the joystick node in ROS 2. </p> <p>More details about catmux can be found here.</p> <p>Now you can move the robot using joystick connected to the main board computer in ROS 2. The velocity commands are sent to the robot over the <code>/cmd_vel</code> topic.</p> <p>If it does not work, kill the session using the below command and try again:  <pre><code>stopmomo\n</code></pre> Note: Just closing the terminals is not enough, you need to kill the catmux session using the above command.</p>"},{"location":"3_startup_procedure/#shutdown-and-cleanup","title":"Shutdown and Cleanup","text":"<p>To completely shutdown the robot including both the computers, enter the following command on the main board computer terminal:</p> <pre><code>sleepmomo\n</code></pre>"},{"location":"4_troubleshooting/","title":"Troubleshooting","text":"<p>This section contains troubleshooting guidelines for common issues and errors encountered while working with MoMo's software stack. It provides solutions, workarounds, and debugging techniques for diagnosing and resolving problems effectively.</p>"},{"location":"4_troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ul> <li>Issue: MoMo does not respond to the movement commands.</li> <li>Solution: Make sure the Control PC is turned on and check the connection using <code>ping &lt;IP-address&gt;</code> from the Main PC. Restart the bash scripts and make sure you run them in sequence with a delay of 5 seconds between each script.</li> </ul> <ul> <li>Issue: Can I adjust MoMo's top speed? </li> <li>Solution: Absolutely, you can modify both the linear and angular velocities, as well as the accelerations, within the momo_control package located in the catkin_ws on the Control PC. Update the settings in the yaml file and rebuild the package to apply the changes.</li> </ul>"},{"location":"4_troubleshooting/#frequently-asked-questions-faqs","title":"Frequently Asked Questions (FAQs)","text":"<p>This section provides answers to frequently asked questions about MoMo's software stack. It covers common queries, issues, and concerns raised by users during development, deployment, and operation of MoMo.</p>"},{"location":"4_troubleshooting/#general-questions","title":"General Questions","text":"<ul> <li>Question: What version of Ubuntu is recommended?</li> <li>Answer: For the Main PC, Ubuntu 22.04 (Jammy Jellyfish) is recommended due to its compatibility with ROS 2 Humble. For the Control PC, Ubuntu 20.04 (Focal Fossa) is necessary to ensure the ROS Bridge functions correctly.</li> </ul> <ul> <li>Question: Which version of ROS should I use?</li> <li>Answer: For the Main PC, ROS 2 Humble is advised because of its extended support period. On the Control PC, you should run ROS Noetic along with ROS 2 Humble to ensure compatibility with the ROS Bridge.</li> </ul> <ul> <li>Question: Why is it necessary to use two computers? Can't I use just one for all tasks?</li> <li>Answer: The powerful Maxon actuators currently in use lack ROS 2 drivers, which necessitates the use of two computers. As soon as these drivers become available, it will be possible to consolidate tasks onto a single computer. Until then, we manage high-level and low-level controls on separate computers via the ROS Bridge.</li> </ul>"},{"location":"4_troubleshooting/#technical-questions","title":"Technical Questions","text":"<ul> <li>Question: Why can't I view the lidar data even though I've configured the lidar properly?</li> <li>Answer: Ensure there are no IP address conflicts among connected interfaces by checking the output of the <code>ifconfig</code> command. This will help verify that all network settings are correctly configured.</li> </ul> <ul> <li>Question: What types of sensors are compatible with MoMo?</li> <li>Answer: MoMo is designed to be fully open-source and configurable, supporting a wide range of sensors that can be mounted as top modules. Compatible sensors include 2D lidar, 3D lidar, depth cameras, stereo cameras, and many others.</li> </ul>"},{"location":"4_troubleshooting/#deployment-questions","title":"Deployment Questions","text":"<ul> <li>Question: What is the battery life of MoMo?</li> <li>Answer: The battery duration varies based on usage and workload. Typically, under heavy usage, MoMo's battery can last throughout a full working day.</li> </ul> <ul> <li>Question: Is MoMo suitable for outdoor use?</li> <li>Answer: MoMo is primarily designed for indoor settings and isn't waterproof. Therefore, it is not recommended for outdoor operation. If you choose to use it outdoors, please do so at your own risk.</li> </ul>"},{"location":"4_troubleshooting/#contact-support","title":"Contact Support","text":"<p>If you encounter an issue that is not covered in this documentation or if you need further assistance, open an issue in the Github repository. Please feel free to contact markus.knitt@tuhh.de.</p>"},{"location":"5_top_modules/","title":"Top Modules","text":"<p>Here, you can find exemplary top modules that have been designed. These can help you as a reference when building your own custom top module. At this point there is only one module that has been built but more will be added and documented here in the future.</p>"},{"location":"5_top_modules/#perception-module","title":"Perception Module","text":"<p>The autonomous navigation of mobile robots depends largely on reliable localization systems. Various environmental influences such as direct sunlight, reflection, map ambiguity, the movement of the robot, or dynamic obstacles can disrupt localization systems and jeopardize process reliability. A monitoring software will be developed and evaluated using data-driven models to detect and monitor these faults. The aim is to control the localization quality during operation, identify errors, and make adjustments to ensure the safety and efficiency of the robots. This includes collecting relevant environmental data, creating models to estimate the uncertainty of the robot pose, and using synthetic and real-world sensor data for modeling. The models are validated experimentally to ensure transferability to real application scenarios. The perception and localization module that will be used for data collection and validation is shown in the following figure.</p> <p>The module is equipped with reflective markers (1) that a motion-capturing system uses to track the movement of the robot. Four light sensors (3) and four webcams (4) are mounted on the robot. Additional sensors are a 360-degree LiDAR (2), a tracking camera (6), and a depth camera (8). This research project utilizes some hardware that is very use-case-specific. The modular connector (7) allows mounting the localization module in seconds, enabling flexible cooperation with researchers requiring a different top module. The transmission of the motors allows accurate positioning and flexible kinematics, making it possible to investigate localization performance for various types of movements.</p> <p>The CAD parts and software for the perception module can be found in the GitHub repository under the humble-perception-module branch.</p>"},{"location":"6_simulation/","title":"Simulation","text":"<p>This section provides an overview of the Gazebo simulation environment where you can launch and test MoMo with perception module in different worlds and visualize sensor data.</p>"},{"location":"6_simulation/#prerequisites","title":"Prerequisites","text":"<p>Before you can launch the simulation, ensure the following are installed on your system:</p> <ul> <li>ROS 2 (Humble)</li> <li>Gazebo (version 11)</li> </ul> <p>Make sure your ROS 2 installation is properly sourced.</p>"},{"location":"6_simulation/#package-overview","title":"Package Overview","text":"<p>The package <code>momo_description</code> contains the necessary files to launch MoMo in a Gazebo simulation.</p> <ul> <li>URDF files: Located in the <code>urdf/</code> folder, these files describe the robot model using xacro.</li> <li>Launch files: These files allow you to launch MoMo in either an empty world or a custom world.</li> </ul>"},{"location":"6_simulation/#how-to-build-the-package","title":"How to Build the Package","text":"<p>First, clone the repository and build the workspace:</p> <pre><code>cd ~/ros2_ws/src\ngit clone --branch humble-perception https://github.com/TUHH-ITL/MoMo\ncd ~/ros2_ws\ncolcon build\n</code></pre> <p>Source the workspace after building:</p> <pre><code>source ~/ros2_ws/install/setup.bash\n</code></pre>"},{"location":"6_simulation/#launching-the-simulation","title":"Launching the Simulation","text":"<p>You can launch MoMo in various environments. Here are the available options:</p>"},{"location":"6_simulation/#1-launch-momo-in-an-empty-world","title":"1. Launch MoMo in an Empty World","text":"<p>To launch MoMo in an empty Gazebo world, run the following command:</p> <pre><code>ros2 launch momo_description momo_sim.launch.py\n</code></pre> <p></p> <p>This will spawn MoMo in an empty world. You can then interact with the robot and visualize the sensor data.</p>"},{"location":"6_simulation/#2-launch-momo-in-a-custom-world","title":"2. Launch MoMo in a Custom World","text":"<p>To launch MoMo in the custom museum world:</p> <pre><code>ros2 launch momo_description momo_museum.launch.py \n</code></pre> <p></p> <p>This will load MoMo into the custom museum environment.</p>"},{"location":"6_simulation/#teleoperating-the-robot","title":"Teleoperating the Robot","text":"<p>After launching the simulation, you can teleoperate the robot using the keyboard. Run the following command in a new terminal:</p> <pre><code>ros2 run teleop_twist_keyboard teleop_twist_keyboard\n</code></pre> <p>Use the provided keyboard instructions to control the robot's movement.</p>"},{"location":"6_simulation/#viewing-sensor-data-in-rviz","title":"Viewing Sensor Data in RViz","text":"<p>To visualize MoMo\u2019s sensor data (LiDAR, camera, and depth camera) in RViz:</p> <p></p> <p>Open a new terminal and launch RViz:    <pre><code>rviz2\n</code></pre></p> <p>Add the necessary sensor displays as required.</p> <p></p> <p>All sensor topics will be available after the robot is launched in the Gazebo simulation. You can visualize the data in RViz by subscribing to the appropriate topics.</p>"},{"location":"6_simulation/#further-notes","title":"Further Notes","text":"<ul> <li>Simulation Requirements: Ensure Gazebo 11 is installed, as this simulation is designed for Gazebo 11.</li> <li>ROS 2 Compatibility: This project is built for ROS 2 Humble and has been tested with versions compatible with Gazebo 11.</li> <li>Teleoperation: Once the robot is launched, you can easily control it via the <code>teleop_twist_keyboard</code> ROS 2 node.</li> <li>Sensor Topics: All sensors (LiDAR, camera, depth camera) publish their respective data to standard ROS 2 topics, which can be visualized in RViz.</li> </ul>"},{"location":"6_simulation/#contributing","title":"Contributing","text":"<p>Feel free to contribute to the MoMo simulation project by submitting issues or pull requests on the repository.</p>"},{"location":"7_api_reference/","title":"API Reference","text":"<p>The API reference section documents the Application Programming Interfaces (APIs) exposed by MoMo's software modules. It includes detailed descriptions of functions, parameters, and usage examples for each API. This section serves as a reference guide for developers integrating with or extending MoMo's software stack.</p>"},{"location":"7_api_reference/#momo_control","title":"momo_control","text":"<p>In this section, the design and implementation of the momo_control ROS package for controlling a 4-wheel mecanum mobile robot are detailed. The software components described below enable robust motion control, odometry calculation, and velocity limiting to ensure safe and effective operation of the robotic platform within ROS Noetic framework.</p>"},{"location":"7_api_reference/#mecanum_drive_controller","title":"mecanum_drive_controller","text":"<p>The Mecanum Drive Controller is responsible for managing the robot's motion by computing appropriate joint commands based on received velocity inputs. Utilizing mecanum drive kinematics, the controller translates desired linear and angular velocities into individual wheel velocities. This ensures the robot moves in the intended direction and can perform omnidirectional maneuvers effectively. The controller also integrates odometry calculations to track the robot's position and orientation using wheel encoders and publishes this information for localization and navigation purposes. The controller subscribes to velocity commands through the cmd_vel topic and publishes joint commands to control the robot's motion. It is configured with parameters such as wheel names, publishing rates, pose and twist covariance matrices, and command velocity timeout to optimize performance and responsiveness. Additionally, it supports dynamic reconfiguration through ROS parameters, enabling adjustments to wheel properties and odometry settings based on the robot's configuration.</p>"},{"location":"7_api_reference/#odometry","title":"odometry","text":"<p>The Odometry module computes and publishes accurate odometry information essential for localization and navigation of the robot. By continuously updating wheel positions and velocities, derived from wheel encoders, the odometry module estimates the robot's pose (position and orientation) relative to its starting point. This information is critical for autonomous navigation tasks, as it provides real-time feedback on the robot's position within its environment. The odometry module supports open-loop and closed-loop control strategies, enabling seamless integration with the motion controller for precise maneuvering. It publishes odometry data through the odom topic in the form of nav_msgs/Odometry messages, including position (x, y), orientation (yaw angle), and linear and angular velocities. The module's configuration parameters, such as wheel radius and separation distance, are set from the robot's URDF (Unified Robot Description Format), ensuring consistency between physical specifications and computational models.</p>"},{"location":"7_api_reference/#speed_limiter","title":"speed_limiter","text":"<p>The  enhances operational safety by enforcing velocity, acceleration, and jerk limits on the robot's motion. This prevents the robot from exceeding predefined speed thresholds, thus minimizing the risk of collisions and ensuring smooth andcontrolled movements. The speed limiter module adjusts linear and angular velocities based on specified limits, maintaining safe operating conditions during various maneuvers. Implemented as a configurable ROS node, the speed limiter subscribes to velocity commands and applies constraints to ensure compliance with safety parameters. It operates in conjunction with the mecanum drive controller, dynamically adjusting speed limits based on the robot's operational mode and environmental conditions. By publishing limited velocity commands through the publish_cmd topic, it enables downstream modules to execute controlled motions while adhering to safety protocols.</p>"},{"location":"7_api_reference/#parameters-and-topics","title":"Parameters and Topics","text":"<p>The software components are configured using ROS parameters, allowing flexibility and adaptability to different robotic platforms and operational scenarios. Key parameters include wheel properties (radius, separation), covariance matrices for odometry data, and velocity constraints for the speed limiter. These parameters are crucial for optimizing performance and ensuring compatibility with the robot's mechanical design and operational requirements.</p>"},{"location":"7_api_reference/#parameters","title":"Parameters","text":"<ul> <li><code>left_wheel</code>: Specifies the joint names for the left wheels.</li> <li><code>right_wheel</code>: Specifies the joint names for the right wheels.</li> <li><code>publish_rate</code>: The rate (in Hz) at which the controller state is published.</li> <li><code>pose_covariance_diagonal</code>: Diagonal elements of the covariance matrix for the pose, indicating confidence in the estimated pose.</li> <li><code>twist_covariance_diagonal</code>: Diagonal elements of the covariance matrix for the twist, indicating confidence in the estimated twist.</li> <li><code>cmd_vel_timeout</code>: The timeout (in seconds) for velocity commands.</li> <li><code>publish_velocity_cmd</code>: Determines whether the velocity command should be published.</li> <li><code>publish_wheel_joint_controller_state</code>: Determines whether the wheel joint controller state should be published.</li> <li><code>base_frame_id</code>: The frame ID for the base of the robot.</li> <li><code>left_wheel_radius_multiplier</code>: Multiplier for the radius of the left wheels.</li> <li><code>right_wheel_radius_multiplier</code>: Multiplier for the radius of the right wheels.</li> <li><code>enable_odom_tf</code>: Determines whether the odometry should be published to TF.</li> <li><code>wheel_distance</code>: Distance between the front and rear wheels.</li> <li><code>wheel_radius</code>: Radius of the wheels.</li> <li><code>wheel_separation</code>: Separation distance between the left and right wheels.</li> <li><code>required_drive_mode</code>: Specifies the required drive mode for the controller.</li> <li><code>linear.x.has_velocity_limits</code>: Enables velocity limits for linear x direction.</li> <li><code>linear.x.has_acceleration_limits</code>: Enables acceleration limits for linear x direction.</li> <li><code>linear.x.max_velocity</code>: Maximum allowable velocity for linear x direction.</li> <li><code>linear.x.min_velocity</code>: Minimum allowable velocity for linear x direction.</li> <li><code>linear.x.max_acceleration</code>: Maximum allowable acceleration for linear x direction.</li> <li><code>linear.x.min_acceleration</code>: Minimum allowable acceleration for linear x direction.</li> <li><code>linear.y.has_velocity_limits</code>: Enables velocity limits for linear y direction.</li> <li><code>linear.y.has_acceleration_limits</code>: Enables acceleration limits for linear y direction.</li> <li><code>linear.y.max_velocity</code>: Maximum allowable velocity for linear y direction.</li> <li><code>linear.y.min_velocity</code>: Minimum allowable velocity for linear y direction.</li> <li><code>linear.y.max_acceleration</code>: Maximum allowable acceleration for linear y direction.</li> <li><code>linear.y.min_acceleration</code>: Minimum allowable acceleration for linear y direction.</li> <li><code>angular.z.has_velocity_limits</code>: Enables velocity limits for angular z direction.</li> <li><code>angular.z.has_acceleration_limits</code>: Enables acceleration limits for angular z direction.</li> <li><code>angular.z.max_velocity</code>: Maximum allowable angular velocity for angular z direction.</li> <li><code>angular.z.min_velocity</code>: Minimum allowable angular velocity for angular z direction.</li> <li><code>angular.z.max_acceleration</code>: Maximum allowable angular acceleration for angular z direction.</li> <li><code>angular.z.min_acceleration</code>: Minimum allowable angular acceleration for angular z direction.</li> </ul>"},{"location":"7_api_reference/#subscribed-topics","title":"Subscribed Topics","text":"<ul> <li><code>cmd_vel</code> (geometry_msgs/Twist): Velocity commands to control robot motion.</li> </ul>"},{"location":"7_api_reference/#published-topics","title":"Published Topics","text":"<ul> <li><code>odom</code> (nav_msgs/Odometry): Odometry information including position, orientation, and velocities.</li> <li><code>tf</code> (tf/tfMessage): Transformation from odom to robot base_footprint.</li> <li><code>publish_cmd</code> (geometry_msgs/TwistStamped): Limited velocity commands after applying speed limiters.</li> </ul>"}]}